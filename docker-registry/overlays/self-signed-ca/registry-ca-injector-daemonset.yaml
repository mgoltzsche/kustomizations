# Installs the CA cert on each node.
# Tested successfully using CRI-O as container runtime
# on a centos:7-based host.
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: registry-ca-injector-daemonset
spec:
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        run-once-daemonset: registry-ca-injector-daemonset
    spec:
      hostPID: true
      containers:
      - name: registry-ca-injector-daemonset
        image: governmentpaas/curl-ssl
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
        - |
            [ "$(cat /ca-cert/ca.crt)" ] || (echo /ca-cert/ca.crt is empty >&2; false) || exit 1
            set -exo pipefail
            copyCaCert() {
              CERT_DIR=$1
              mkdir -p "$CERT_DIR"
              CERT_FILE=$CERT_DIR/registry-ca-${CERT_NAME}-$(md5sum /ca-cert/ca.crt | cut -d' ' -f1).crt
              if [ ! -f "$CERT_FILE" ]; then
                cp /ca-cert/ca.crt $CERT_DIR/.tmp-registry-ca-cert-$CERT_NAME
                mv $CERT_DIR/.tmp-registry-ca-cert-$CERT_NAME $CERT_FILE
                for OLDCERT in $(ls $CERT_DIR | grep -E "registry-ca-${CERT_NAME}-"'[0-9a-f]+\.crt' | grep -v $CERT_NAME); do
                  rm -f $CERT_DIR/$OLDCERT
                done
              fi
            }
            rm -rf /etc/ssl/certs /usr/local/share/ca-certificates
            mkdir -p /etc/ssl/certs /usr/local/share/ca-certificates
            copyCaCert /host/usr/local/share/ca-certificates
            mount --bind /host/etc/ssl/certs /etc/ssl/certs
            STATUS=0
            (mount --bind /host/usr/local/share/ca-certificates /usr/local/share/ca-certificates
            update-ca-certificates
            c_rehash) || STATUS=1
            umount /etc/ssl/certs
            umount /usr/local/share/ca-certificates
            [ "$STATUS" -eq 0 ] || exit 1
            #[ ! -d /etc/kubernetes/pki ] || cp -f /ca-cert/ca.crt /etc/kubernetes/pki/registry-ca.crt
            if [ -d /host/etc/pki/ca-trust/source/anchors ]; then
              # for RHEL/fedora/centos:
              copyCaCert /host/etc/pki/ca-trust/source/anchors
              chroot /host /usr/bin/update-ca-trust
            fi

            CRIO_PID="$(ps aux | grep -Em1 ' /usr/local/bin/crio( |$)' | grep -Eo '^\s*[0-9]+' | grep -Eo '[0-9]+')" || true
            if [ "$CRIO_PID" ]; then
              # Force CRI-O reload if crio process found to pick up new CA cert
              kill -1 "$CRIO_PID" || (echo ERROR: failed to reload crio >&2; false)
            else
              echo 'WARN: Could not find crio process.' >&2
              echo '  You may need to restart the container engine on each node' >&2
              echo '  manually to ensure the new CA certificate is registered.' >&2
            fi

            echo Synced CA certificate on node $(cat /host/etc/hostname) > /tmp/synced

            (while true; do sleep 86400; done) &
            SLEEP_PID=$!
            terminate() {
              kill -9 $SLEEP_PID
              exit 0
            }
            trap terminate 1 2 15
            wait
        securityContext:
          privileged: true
        readinessProbe:
          exec:
            command:
              - /bin/cat
              - /tmp/synced
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: "10m"
            memory: "16Mi"
          limits:
            cpu: "300m"
            memory: "64Mi"
        env:
        - name: CERT_NAME
          value: $(CA_CERT_SECRET_NAME)
        volumeMounts:
        - name: ca-cert
          mountPath: /ca-cert
        - name: hostfs
          mountPath: /host
          readOnly: false
      terminationGracePeriodSeconds: 30
      volumes:
      - name: ca-cert
        secret:
          secretName: $(CA_CERT_SECRET_NAME)
      - name: hostfs
        hostPath:
          path: /
