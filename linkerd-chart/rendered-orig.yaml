---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    linkerd.io/inject: disabled
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/is-control-plane: "true"
  name: linkerd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
  name: linkerd-cert-issuer
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
  name: linkerd-cert-issuer
  namespace: linkerd
rules:
- apiGroups:
  - batch
  resources:
  - cronjobs
  verbs:
  - get
  - patch
- apiGroups:
  - ""
  resources:
  - secrets
  - configmaps
  verbs:
  - get
  - create
  - patch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  - certificatesigningrequests/approval
  verbs:
  - get
  - create
  - update
  - delete
  - approve
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
  name: linkerd-cert-issuer
  namespace: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-cert-issuer
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: linkerd-cert-issuer
  namespace: linkerd
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-cert-rotator
  namespace: linkerd
spec:
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/managed-by: k8spkg
        app.kubernetes.io/part-of: linkerd
        k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            app.kubernetes.io/managed-by: k8spkg
            app.kubernetes.io/part-of: linkerd
            k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
        spec:
          automountServiceAccountToken: true
          containers:
          - args:
            - |
              set -ex
              # Also see https://www.scottguymer.co.uk/post/kubernetes-mutating-webhook-configuration/
              kubectl patch cronjob/${CRON_NAME} -p '{"spec":{"schedule": "0 0 1 * *"}}'
              apk add --update --no-cache openssl jq
              cat > /tmp/csr.conf <<-EOF
                [req]
                req_extensions     = v3_req
                distinguished_name = req_distinguished_name
                [req_distinguished_name]
                [ v3_req ]
                basicConstraints = CA:FALSE
                keyUsage = nonRepudiation, digitalSignature, keyEncipherment
                extendedKeyUsage = serverAuth
                subjectAltName = @alt_names
                [alt_names]
                DNS.1 = ${SERVICE_NAME}
                DNS.2 = ${SERVICE_NAME}.${NAMESPACE}
                DNS.3 = ${SERVICE_NAME}.${NAMESPACE}.svc
                DNS.4 = ${SERVICE_NAME}.${NAMESPACE}.${CLUSTER_DOMAIN}
                # TODO: add all 3 service names?
              EOF
              openssl genrsa -out /tmp/tls.key 2048
              openssl req -new -out /tmp/tls.csr -key /tmp/tls.key -sha512 -days 90 -subj "/CN=${SERVICE_NAME}.${NAMESPACE}.svc" -config /tmp/csr.conf
              kubectl delete csr ${SERVICE_NAME}.${NAMESPACE} --ignore-not-found
              kubectl create -f - <<-EOF
                apiVersion: certificates.k8s.io/v1beta1
                kind: CertificateSigningRequest
                metadata:
                  name: ${SERVICE_NAME}.${NAMESPACE}
                spec:
                  groups:
                  - system:authenticated
                  request: $(cat /tmp/tls.csr | base64 | tr -d '\n')
                  usages:
                  - digital signature
                  - key encipherment
                  - server auth
              EOF
              kubectl certificate approve ${SERVICE_NAME}.${NAMESPACE}
              kubectl get csr ${SERVICE_NAME}.${NAMESPACE} -o jsonpath='{.status.certificate}' | base64 -d > /tmp/tls.crt
              [ "$(openssl rsa -modulus -noout -in /tmp/tls.key | openssl md5)" = "$(openssl x509 -modulus -noout -in /tmp/tls.crt | openssl md5)" ] \
                || (echo priv key does not match pub key >&2; false)
              openssl verify -verbose -CAfile /run/secrets/kubernetes.io/serviceaccount/ca.crt /tmp/tls.crt
              # Update linkerd configuration with CA cert
              CA_CRT="$(cat /run/secrets/kubernetes.io/serviceaccount/ca.crt)"
              CFG_TRANSFORM='.metadata.name = "linkerd-config" | .data.global = (.data.global | fromjson | .identityContext.trustAnchorsPem = $ca | tojson) | del(.metadata.uid) | del(.metadata.resourceVersion) | del(.metadata.creationTimestamp)'
              kubectl get configmap linkerd-config-tpl -o json | jq -e --arg ca "$CA_CRT" "$CFG_TRANSFORM" - | kubectl apply -f -
              # TODO: use ca.crt from service account token instead of saving it here again
              kubectl apply -f - <<-EOF
                apiVersion: v1
                kind: Secret
                metadata:
                  name: ${CA_SECRET_NAME}
                type: Opaque
                data:
                  ca.pem: $(cat /run/secrets/kubernetes.io/serviceaccount/ca.crt | base64 | tr -d '\n')
              EOF
              kubectl apply -f - <<-EOF
                apiVersion: v1
                kind: Secret
                metadata:
                  name: ${SECRET_NAME}
                  labels:
                    linkerd.io/control-plane-component: identity
                    linkerd.io/control-plane-ns: linkerd
                type: Opaque
                data:
                  crt.pem: $(cat /tmp/tls.crt | base64 | tr -d '\n')
                  key.pem: $(cat /tmp/tls.key | base64 | tr -d '\n')
              EOF
            command:
            - /bin/sh
            - -c
            env:
            - name: CLUSTER_DOMAIN
              value: cluster.local
            - name: SERVICE_NAME
              value: identity
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CRON_NAME
              value: linkerd-cert-rotator
            - name: SECRET_NAME
              value: linkerd-identity-issuer
            - name: CA_SECRET_NAME
              value: linkerd-identity-trust-anchors
            image: lachlanevenson/k8s-kubectl:v1.15.3
            name: cert-rotator
          restartPolicy: Never
          serviceAccountName: linkerd-cert-issuer
  schedule: '*/1 * * * *'
---
apiVersion: v1
data:
  global: |
    {
      "linkerdNamespace": "linkerd",
      "cniEnabled": false,
      "version": "stable-2.5.0",
      "identityContext":{
        "trustDomain": "cluster.local",
        "trustAnchorsPem": "unknown-ca",
        "issuanceLifeTime": "86400s",
        "clockSkewAllowance": "20s"
      },
      "autoInjectContext": null,
      "omitWebhookSideEffects": false,
      "clusterDomain": "cluster.local"
    }
  install: |
    {
      "uuid":"e71a4cb2-12b5-4c28-92f7-2e95cc26fb8b",
      "cliVersion":"stable-2.5.0",
      "flags":[]
    }
  proxy: |
    {
      "proxyImage":{
        "imageName":"gcr.io/linkerd-io/proxy",
        "pullPolicy":"IfNotPresent"
      },
      "proxyInitImage":{
        "imageName":"gcr.io/linkerd-io/proxy-init",
        "pullPolicy":"IfNotPresent"
      },
      "controlPort":{
        "port": 4190
      },
      "ignoreInboundPorts":[],
      "ignoreOutboundPorts":[],
      "inboundPort":{
        "port": 4143
      },
      "adminPort":{
        "port": 4191
      },
      "outboundPort":{
        "port": 4140
      },
      "resource":{
        "requestCpu": "",
        "limitCpu": "",
        "requestMemory": "",
        "limitMemory": ""
      },
      "proxyUid": 2102,
      "logLevel":{
        "level": "warn,linkerd2_proxy=info"
      },
      "disableExternalProfiles": true,
      "proxyVersion": "stable-2.5.0",
      "proxyInitImageVersion": "v1.0.0"
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-config-tpl
  namespace: linkerd
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-control-plane
spec:
  allowPrivilegeEscalation: false
  allowedCapabilities:
  - NET_ADMIN
  - NET_RAW
  fsGroup:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  hostIPC: false
  hostNetwork: false
  hostPID: false
  readOnlyRootFilesystem: true
  requiredDropCapabilities:
  - ALL
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    ranges:
    - max: 65535
      min: 1
    rule: MustRunAs
  volumes:
  - configMap
  - emptyDir
  - secret
  - projected
  - downwardAPI
  - persistentVolumeClaim
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-psp
  namespace: linkerd
rules:
- apiGroups:
  - policy
  - extensions
  resourceNames:
  - linkerd-linkerd-control-plane
  resources:
  - podsecuritypolicies
  verbs:
  - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-psp
  namespace: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: linkerd-psp
subjects:
- kind: ServiceAccount
  name: linkerd-controller
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-grafana
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-identity
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-prometheus
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-proxy-injector
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-sp-validator
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd
- kind: ServiceAccount
  name: linkerd-web
  namespace: linkerd
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-identity
  namespace: linkerd
spec:
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
  selector:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: identity
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-identity
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: k8spkg
      app.kubernetes.io/part-of: linkerd
      k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
      linkerd.io/control-plane-component: identity
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-identity
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.5.0
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.5.0
      labels:
        app.kubernetes.io/managed-by: k8spkg
        app.kubernetes.io/part-of: linkerd
        k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
        linkerd.io/control-plane-component: identity
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-identity
    spec:
      containers:
      - args:
        - identity
        - -log-level=info
        image: gcr.io/linkerd-io/controller:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9990
          initialDelaySeconds: 10
        name: identity
        ports:
        - containerPort: 8080
          name: grpc
        - containerPort: 9990
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9990
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
        - mountPath: /var/run/linkerd/identity/issuer
          name: identity-issuer
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd2_proxy=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-destination.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            substitute-ca-crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: localhost.:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-controller.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            secretKeyRef:
              key: ca.pem
              name: linkerd-identity-trust-anchors
        image: gcr.io/linkerd-io/proxy:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources: null
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.0.0
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-identity
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - name: identity-issuer
        secret:
          secretName: linkerd-identity-issuer
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
apiVersion: v1
data:
  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: http://linkerd-prometheus.linkerd.svc.cluster.local:9090
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true
  grafana.ini: |-
    instance_name = linkerd-grafana

    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/

    [auth]
    disable_login_form = true

    [auth.anonymous]
    enabled = true
    org_role = Editor

    [auth.basic]
    enabled = false

    [analytics]
    check_for_updates = false

    [panels]
    disable_sanitize_html = true
kind: ConfigMap
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: grafana
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-grafana-config
  namespace: linkerd
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: grafana
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-grafana
  namespace: linkerd
spec:
  ports:
  - name: http
    port: 3000
    targetPort: 3000
  selector:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: grafana
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: grafana
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-grafana
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: k8spkg
      app.kubernetes.io/part-of: linkerd
      k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
      linkerd.io/control-plane-component: grafana
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-grafana
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.5.0
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.5.0
      labels:
        app.kubernetes.io/managed-by: k8spkg
        app.kubernetes.io/part-of: linkerd
        k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
        linkerd.io/control-plane-component: grafana
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-grafana
    spec:
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        image: gcr.io/linkerd-io/grafana:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd2_proxy=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-destination.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            substitute-ca-crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-controller.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            secretKeyRef:
              key: ca.pem
              name: linkerd-identity-trust-anchors
        image: gcr.io/linkerd-io/proxy:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources: null
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.0.0
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: linkerd-grafana-config
        name: grafana-config
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
apiVersion: v1
data:
  prometheus.yml: |-
    global:
      scrape_interval: 10s
      scrape_timeout: 10s
      evaluation_interval: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    - job_name: 'grafana'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        action: keep
        regex: ^grafana$

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names: ['linkerd']
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: (.*);admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
kind: ConfigMap
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-prometheus-config
  namespace: linkerd
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-prometheus
  namespace: linkerd
spec:
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
  selector:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: prometheus
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-prometheus
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: k8spkg
      app.kubernetes.io/part-of: linkerd
      k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
      linkerd.io/control-plane-component: prometheus
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-prometheus
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.5.0
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.5.0
      labels:
        app.kubernetes.io/managed-by: k8spkg
        app.kubernetes.io/part-of: linkerd
        k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
        linkerd.io/control-plane-component: prometheus
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-prometheus
    spec:
      containers:
      - args:
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        - --config.file=/etc/prometheus/prometheus.yml
        - --log.level=info
        image: prom/prometheus:v2.11.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        securityContext:
          runAsUser: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus
          name: prometheus-config
          readOnly: true
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd2_proxy=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-destination.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_OUTBOUND_ROUTER_CAPACITY
          value: "10000"
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            substitute-ca-crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-controller.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            secretKeyRef:
              key: ca.pem
              name: linkerd-identity-trust-anchors
        image: gcr.io/linkerd-io/proxy:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources: null
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.0.0
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-prometheus
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          name: linkerd-prometheus-config
        name: prometheus-config
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: grafana
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-grafana
  namespace: linkerd
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-ns: linkerd
  name: serviceprofiles.linkerd.io
spec:
  group: linkerd.io
  names:
    kind: ServiceProfile
    plural: serviceprofiles
    shortNames:
    - sp
    singular: serviceprofile
  scope: Namespaced
  versions:
  - name: v1alpha1
    served: true
    storage: false
  - name: v1alpha2
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-ns: linkerd
  name: trafficsplits.split.smi-spec.io
spec:
  additionalPrinterColumns:
  - JSONPath: .spec.service
    description: The apex service of this split.
    name: Service
    type: string
  group: split.smi-spec.io
  names:
    kind: TrafficSplit
    plural: trafficsplits
    shortNames:
    - ts
    singular: trafficsplit
  scope: Namespaced
  version: v1alpha1
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-controller
rules:
- apiGroups:
  - extensions
  - apps
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - extensions
  - batch
  resources:
  - jobs
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - endpoints
  - services
  - replicationcontrollers
  - namespaces
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - linkerd.io
  resources:
  - serviceprofiles
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - split.smi-spec.io
  resources:
  - trafficsplits
  verbs:
  - list
  - get
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-controller
subjects:
- kind: ServiceAccount
  name: linkerd-controller
  namespace: linkerd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-controller
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-identity
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-identity
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-identity
subjects:
- kind: ServiceAccount
  name: linkerd-identity
  namespace: linkerd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-identity
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-prometheus
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - pods
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-prometheus
subjects:
- kind: ServiceAccount
  name: linkerd-prometheus
  namespace: linkerd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: prometheus
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-prometheus
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-proxy-injector
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
- apiGroups:
  - apps
  resources:
  - replicasets
  verbs:
  - list
  - get
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-proxy-injector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-proxy-injector
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: linkerd-proxy-injector
  namespace: linkerd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector
  namespace: linkerd
---
apiVersion: v1
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lSQU5jTGQ0cGd6eERXcnhkbVBaQmpQSEF3RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB4T1RBNU1qSXhPVEU1TWpoYUZ3MHlNREE1TWpFeE9URTVNamhhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRRElab0x6Z3M5TERRa0dzSWJVcitWeng4UmFjbnc4alR6Y3BGQmF4TFgvbURsSwptSVFnQnQ3RFVhUEx2cjNYbncyeng0WGNOdkE0bVFOTmRyT1ZiV0o4dURFZ3MyQkRpN3ZSYllnS1lNS1BsT0IxCkpiL0tpcmJnNEs5dzJ2aC9YRXVTcDA2Vk9tL2U0NTFybGdSSVZDVkh4UmFyRzJHQVU1WlhpY0p5ZTk5REtlMVoKMlhhTnc0RVVLS0hWZ2ozYStGVFkvbGdqLzB1bC90ZGN5eUlFeHBrb3daWEorcFgvL3J6anI1YzRuSFZKc2tvdApaUTRqYzBJSkx6NlBMQVdxRjZIY3Z2eERrSFlidG5iVnIwdC8ydkdIeUFtNndOb1pDeTExcEp4WnN0NVIrR0VFCjdBSlduU3VKaTlYYWFPRXFlTy9HOWpWWEtweG82VmxxNmhYenF2SFJBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIKL3dRRUF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFILwpCQVV3QXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFDU3hrZjBEN08weGducUo4eGVYTlg3N2tyeFBTCm4rZTFEeUkzNkpnVURzRUh3M3cwY1k5SHRNSHdlYWp5cDVMYm1NU1pFTUZBQy9TS1B6RjJuTFlvNTYrUEJPaHUKNFZnaUY2dWtCNVRYZkRNaEhnb2VHdVV1aUNYNkZHdlNNTUdHQ3FqNFhQbmFyM21SNkpmQUh0ZTFvMmFGSlllVQpiYnVBV3VZVVU1SVJvaHVzNmx2elkydlhqR0VkdWZ5RDRZcGtQVjMvaThCWGN1bmFtWjIwVXh2amg5cWsyQzVMCnZtQnBQSVl4ZGxmREpqbXNNdWNXbXJZbXllRFNFdVVKUVVFV2ZyT1l6RVl0dG05RHdQQUZVL3VVb2I0dmZGS0QKcUEvY0F0NXlSek45bzBCcUNVbXBKK2ppSjREazMzZFRTVURPOWROVFFmMGdsNnhqdEZ3eE9ISkV0dz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeUdhQzg0TFBTdzBKQnJDRzFLL2xjOGZFV25KOFBJMDgzS1JRV3NTMS81ZzVTcGlFCklBYmV3MUdqeTc2OTE1OE5zOGVGM0Rid09Ka0RUWGF6bFcxaWZMZ3hJTE5nUTR1NzBXMklDbURDajVUZ2RTVy8KeW9xMjRPQ3ZjTnI0ZjF4TGtxZE9sVHB2M3VPZGE1WUVTRlFsUjhVV3F4dGhnRk9XVjRuQ2NudmZReW50V2RsMgpqY09CRkNpaDFZSTkydmhVMlA1WUkvOUxwZjdYWE1zaUJNYVpLTUdWeWZxVi8vNjg0NitYT0p4MVNiSktMV1VPCkkzTkNDUzgranl3RnFoZWgzTDc4UTVCMkc3WjIxYTlMZjlyeGg4Z0p1c0RhR1FzdGRhU2NXYkxlVWZoaEJPd0MKVnAwcmlZdlYybWpoS25qdnh2WTFWeXFjYU9sWmF1b1Y4NnJ4MFFJREFRQUJBb0lCQVFDRSswbVFqOUJBN0ZCKwpDT3dmL08wVkxJNEd1d3ZvSG8weG1UUGRWOFd4NjNDeEtJNGN0cEppS0MyNlNVT3U3dFBuNWRIVk5QdXBneGdtCjhrcnZNSnYzU1Q4SWhSK3ZFdTI2WnFXc3hWSzJkc09QMlZIdzlLV3dpa2pCYWYwV2ZzZURkTlIzd0VSMk1yTEcKcnREK3NoL2ZCVkVxa0V2ZUhSbVowMGVlTXNjUHlIa2NDQVdxWHNNSC9heDIxci9ZWk1DclYyekpDMUkxcnFENApBLzJXVmpoOGxWVEU5ckV4andOL2RZbUVBQ2VHclFaTDZJMG95ajlJS2taa1NzRFFkeWFLWVc3ZUY3VEFXU25rCm9USTIzZFlMd2NYamlZODdwMWJqbWsyUG80Q0RMZ2NvNkFCUVRyOEppNEFXQzJHZlQ1TS9YdHhMTmgxbTdnejEKTDZ2U3lHdEJBb0dCQU43ZFEyNEd1dXVsK1RGQ0h2Y0FwSU9rVmU2V2J5QVNucmFwYVNybVVUcHQrUUxJdndhYQpHZG8vaTdJYjg1Z1hkZEZScHI2NGhPeWQzRkJndWhRakhqdXdQa3BZM1k4UnlZbnJNUDh4OVZHVlpqMjE2MWRzCmZxRW9GNDR2UTAvTFlhTWhrcUk2MjdTODdlL1JmUGhPdnRMeXA5ZGlIdzYreTBzRHpWeVlDeDdaQW9HQkFPWXkKT0hacVN2dEphZTZDYldwT2diUFV6b0poTWhXRXpxZlVGcXcrL3BxbjQ0VlJIY0x6YjFNa1hkd2t3V3p0MU5EcQpaVm96S05Kc2FtS1BuUXRNR09GZFJkMEcyYzYrb3hiT1RWb3p1WitWa0dRYmxUZ01qS0NWR2RBKzJ4ZGR3ekJtClFsS0p3ZHMrM3htaUV5NURNeFZ2cHNSckFsVFk2YXdzTHlZZGRIKzVBb0dBVEtEN3ZHc24vanFWVWpDUUFSSUIKZnhvVVNmTUR4cDFnWVNJaS9STXdQc3p0WDkyeWdReWZjd0dDZ1AxSFpyWTZWbnlpdnRVbkwweWdJaXNBRUVoNgo3cjhNeS9kK1J1RXcwUEZEYVp1OTVBMWdtRHRpN2k1cDQvT3JGY0orZklOTDBSR01INmZwUDEzdTJoVEh5WUVaCjcrSnJmNDFIYklTQjFnczZvMm5MK1JFQ2dZRUExVjFOT216eFRSTlI3YkhVeXNrenJVU2RtUG1RRzZQNmpGS28KSlVWS1puMGhCU3dYZ3VCeW1rVEYvc3ZPd1RGOHBadnREM3NGNW14NCt4d1VPeWx3a2tzSys0QmpHQjlaT1VWRgpLMHR3VFR1ckZ5NzkwM0xHVWYyQmJLVW1HL1ZiZXh2OWMxV2VhcUpPMWdxRTdzZDRyUEROU1pmS0ZHenR3aGsrCkpuejh3M2tDZ1lFQXpoVVFIRFIreWx5aVNLUzhaSzZCWWlNN1JWaUFmN05aZGVwaW5xMGxtN3B4MXdoU3dWUy8KVEhxY2k4WDl4SkJEN2VZUVFsell4K01MYlF3MXN1ajVmeGRXUlZkU25hTlJGakZOQWtsU2JRbzBLY1pwVXVneQp4cnoyS3NISzQvcktqSkU5SmRVb00rS3JoNlJKbDdhSy9qbXRuRUFOd1hib0NNMEw4b2Z6VEp3PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector-tls
  namespace: linkerd
type: Opaque
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector-webhook-config
webhooks:
- clientConfig:
    service:
      name: linkerd-proxy-injector
      namespace: linkerd
      path: /
  failurePolicy: Ignore
  name: linkerd-proxy-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: linkerd.io/is-control-plane
      operator: DoesNotExist
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    resources:
    - pods
  sideEffects: None
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-sp-validator
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-sp-validator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-sp-validator
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: linkerd-sp-validator
  namespace: linkerd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-sp-validator
  namespace: linkerd
---
apiVersion: v1
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lRQzJ1Y1NyQWdxVnZ0OVVYamxvWDlCekFOQmdrcWhraUc5dzBCQVFzRkFEQXIKTVNrd0p3WURWUVFERXlCc2FXNXJaWEprTFhOd0xYWmhiR2xrWVhSdmNpNXNhVzVyWlhKa0xuTjJZekFlRncweApPVEE1TWpJeE9URTVNamhhRncweU1EQTVNakV4T1RFNU1qaGFNQ3N4S1RBbkJnTlZCQU1USUd4cGJtdGxjbVF0CmMzQXRkbUZzYVdSaGRHOXlMbXhwYm10bGNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEEKTUlJQkNnS0NBUUVBeU1xWWZ3dmkveHU4b1FrS0Q0NTN2d2hqdGhEQ3Y1NlE4RWo1SU1NMDlNRkZKa21Vb2NrdgpOMGNyd1FVOFRKMWlWaFhPYzFaUVJ3T3dtTjR2ZWdEdWdWU3ZaOUl0ZVBTKy9PSEhVdkFjbnlJN0M5ZERMaEJzCkYyQU50ZTUzRDdSTkdTc04wSkV0VHN4V0xhZWFJcnpianRMVjRMbkJPUUgxR2FtWERsSk40VnBZSXMrNll5TGYKWEVMVExPRUV3cUlDRzN4ZlhVRmhNTGhKU2lna3RZR2ZqS3k2UVByd2VFZEdmVmtWRStyWklGZmFzSEVraVM2UgpENStuNTNpRTRYeWZWNzc5TEdpOHYybG5KejZHSUNaQWhnNldsMzJ1MFE5Q0poRHFLT3ZuMks0YXJ3V2htVlhqCjBEakV4WHJ5dmlyK1paWjV3RFhlMWRCY0xxY2tvRkdVS3dJREFRQUJvMEl3UURBT0JnTlZIUThCQWY4RUJBTUMKQXFRd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQThHQTFVZEV3RUIvd1FGTUFNQgpBZjh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUxxTUhoMEZHL0pxZWFEOVhnOVhWV1NUSUJ2dDNkR2lWdFR3CnFVUjkyNUtVYUx3K052U05jamR1WjBrK2xIaWtJTHlOcXN5aExoQVZuaEZ5MUFnWmVHTkQ1czBtM2RKV2NTeEwKbUthOSs1b1VEdndIdnNVUm5KcEJmRlQ4dXBNSFg1WmM3d01rTHhCMy94aEtUL0FrNmRyajRhL1BpTXlCMXBVaAprUFNwc3Qzd29iWXNIR1ZlZy9ydDFINnpGTlBaT0lJZHMrcXdWU3R6WlliY3h2bjN1ZzhMYkdXb0Z5RDZoYlNDClMvSWhMSkw0QnI5ODRhMHZlU0pzZHZvTFZZSUNXM0libG5qV2pYaThqejVuTjJuVnJYTVVhMko5NlVvcWgxbW4KdFZ0L1JzaGF2QlNVN0VSbFY2YStoSU40Zm9BOFVqeW5UQ3V0QUh6c202UCt4Qk1PTXMwPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeU1xWWZ3dmkveHU4b1FrS0Q0NTN2d2hqdGhEQ3Y1NlE4RWo1SU1NMDlNRkZKa21VCm9ja3ZOMGNyd1FVOFRKMWlWaFhPYzFaUVJ3T3dtTjR2ZWdEdWdWU3ZaOUl0ZVBTKy9PSEhVdkFjbnlJN0M5ZEQKTGhCc0YyQU50ZTUzRDdSTkdTc04wSkV0VHN4V0xhZWFJcnpianRMVjRMbkJPUUgxR2FtWERsSk40VnBZSXMrNgpZeUxmWEVMVExPRUV3cUlDRzN4ZlhVRmhNTGhKU2lna3RZR2ZqS3k2UVByd2VFZEdmVmtWRStyWklGZmFzSEVrCmlTNlJENStuNTNpRTRYeWZWNzc5TEdpOHYybG5KejZHSUNaQWhnNldsMzJ1MFE5Q0poRHFLT3ZuMks0YXJ3V2gKbVZYajBEakV4WHJ5dmlyK1paWjV3RFhlMWRCY0xxY2tvRkdVS3dJREFRQUJBb0lCQUZpYmx5cFJtNDNLdHJZMQozL3UzZWo2U1BEWm5OUm9NcHBkekRJV1p2Mi9YTG1YVUNNUlFuUVorNE44Z0tWa0NCeGhJTFVBV3NmeDBzMlR5CmYrOE9KREpzcGE5aVAvRGx5TGFlQ0RFZ2h2RHUwVEhMZi9qL0JFUllmaFJ3TkpoNGo2RndyM3IvNWdlbEFzN0kKN0tzeHZvNUxtbGkrZ0hkZzFzSEpaa0RLcjFXbm1RcWkrdHlkZWJEdlhsNEFPQkJZazFwNDZKN2VkdWNUMFVWVgp1Y21RWElSbHFCQWZvdXVtbHBKaWRXL2R5MzUyMCs5RGlkVEptNEYvSVJUa1lZVjFVbkdPZG1Mckx3dzBCajhECnFxaFd5ckdhZ3NPSGFadVFUamNLeXpqVThRQVFJbDU5b2NUVjJzQlpKdFNTbTcydERBVHNha3NLNFdjVGozSy8KUFZQU0xRa0NnWUVBMFdPVjhPbFBJc2h3V0J1SGNWWURPOWVGS3dxYmNJb29KbWtNamwwWTl4TU9nMnQzQ0pwQwozSXRJWTlLdTR1TnU1K1dGVEFWU1kxT3pxVDlOVzVwdlgxUGJrQmE4V09XNmpPRDhRUUVKN2NuVzJkWlQvbWJxCldLcTVaSDVtVGhPeDh6K1ZOTnM1L2RWa0MrVVp3V1YreDBLOUdNQ0R6UFh4K0tCYXJpUzlDQzBDZ1lFQTlYMFAKSUZMUWptQjBpemdHMGgycWp3b1FlYVI0K2JYQlNXSUQzUmdydEYrM1p1MWgwVVF0MW53L3NrNG4yUDFYMGo2QQpxT0dXT3R3M1VVNFc4TGR6dDl3REpxOElhK1NoeGxLSE1UYkk4dUJ0bjRzb05hMWJIT3A3MXB2K3FyWXFnYTZFCk1EWG5BUmM4cGYxSkViQ3Y0ZmNnY29EZ01TeXFsOHU5dUR1TkxMY0NnWUFTZEVSeXh4MUNZNGdETytua0EwQ2wKdFlqM0VpaEE4dXcyOW1zMDROK2ladnVRZVpnMEdlUnFxNXZsc0Z2WmcxSHkvamVSUzZiSE9rbExVVmp3Q2R4bQorbTBQZGZHRHBEdWN6dmRzZ3pyc3lpMDFaYjVoWFpDcDMrSVhDVXphOU1GcVB1QlhtRHEwTkdwczRmUXpKMDdWCklQeXBnYzRiOGxFeEtIRFZpRWRnd1FLQmdCNUk2RlhQZ2FVZTV5SEpycVc3UFRCYVNJQUpOMWR2QWNKZzBpTXoKZVNqT2FoekxpamE3MTMvUFlqaElCZ2h4OEtTaVMxTUtTWE5IZVplUkw2bFFxSGoxTG5wV080Njc3TzAvZnlnbQpIeEkvZDZhb0R6VFlCeGFCSXZmdDFMUVF0eHU2Z05wRnZCTFpZQVVHUXo1b2NycEl0M3NJeFIrcjUvdkVDY3F4CnBnL3ZBb0dCQUx0clg3d3RsYWNZNUNwcHhnMHRqbGJCOFVmVHAzNzA0WG8yTzZFamE2Si9qTFRreHlNSDc0bVoKTWF2K1dzZmNGYlBFcU0xOUtmai9kb1RDUkRlU05HVGVqYkR2MGNza3JsUEdmb3J4RHIrdGhiZ3JSMnZoQzNhQwpPcjdscVRIWWFCS1JicFdIL1pTa1RMMHM2R3lRQ2tYbjNhS0VJa3lDRGNVNjBmdTBDSm5UCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-sp-validator-tls
  namespace: linkerd
type: Opaque
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-sp-validator-webhook-config
webhooks:
- clientConfig:
    service:
      name: linkerd-sp-validator
      namespace: linkerd
      path: /
  failurePolicy: Ignore
  name: linkerd-sp-validator.linkerd.io
  rules:
  - apiGroups:
    - linkerd.io
    apiVersions:
    - v1alpha1
    - v1alpha2
    operations:
    - CREATE
    - UPDATE
    resources:
    - serviceprofiles
  sideEffects: None
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-tap
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - replicationcontrollers
  - namespaces
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - extensions
  - apps
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - extensions
  - batch
  resources:
  - jobs
  verbs:
  - list
  - get
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-tap-admin
rules:
- apiGroups:
  - tap.linkerd.io
  resources:
  - '*'
  verbs:
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-tap
subjects:
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-tap-auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-tap
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-tap-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd
---
apiVersion: v1
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFRENDQWZpZ0F3SUJBZ0lRV3dOUGprSFM2NDhYRmJLbStPYkhjREFOQmdrcWhraUc5dzBCQVFzRkFEQWkKTVNBd0hnWURWUVFERXhkc2FXNXJaWEprTFhSaGNDNXNhVzVyWlhKa0xuTjJZekFlRncweE9UQTVNakl4T1RFNQpNamhhRncweU1EQTVNakV4T1RFNU1qaGFNQ0l4SURBZUJnTlZCQU1URjJ4cGJtdGxjbVF0ZEdGd0xteHBibXRsCmNtUXVjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF5ZFpSSU1VRGR0M3oKdzdNRTByM1dvd1ZONWtLUkU0bVFhaGYxME1KUEF6cWZGTml0M1Z6R0pseDYvL0tBRldnK1MxRmZnem40ZUgycgpGVWMvQlJMYzVuZVNVU1RjQysyWTFUeVV0K3R3MVFmSTBpVkZlaTl3Z096cjc4bytjVEhxT3ZxRy9qeGVHUXN1Ci9uTE9kcWQ2UU5sQThIUVk1OVl4TlR6bnExN2w2c1l3WFRySXh1QkM3bzR1czgva3VNaXl3czE5MXdCS0lBN1cKQlFZRFZpMFpzWnQ2QmhJNlJ0M3Fpd0FZTFJSMzhlb3FGVnFTUDBvRHg4UE1MT3B4Um5NK1ZUbXdSV0FOSWp4MwpyYndyQmliM0F3VlhMR1ZhM1JreXhzMWxPVHRTVlFBYUhlVXp4dFJGSGhLRi9EMng1b01yU2pDM2hmL0JldTFwCkhXTFN6UGZHRFFJREFRQUJvMEl3UURBT0JnTlZIUThCQWY4RUJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUIKQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQThHQTFVZEV3RUIvd1FGTUFNQkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRApnZ0VCQUUxVmwvZVArc25rUFR0TjdIK3hDRG1qMUdQWWFEbkxtNkJ4NXRCOWRsaFhjMFZEdFpaK2RRSnRuRUlQCk5aZExKeVlWQVUxV25TeVQxL0N2WFZ6RGpJUjdhd213UDI5SUY3elVkcWpOR09uVnpiakFUMmYxcDFid2R0K2IKQmZuL0taeVpsckpPYi8xa25lZlV4WWpHUlhQdmRGV0E1UXRPaFNHYUFFd2w1YW82RmtqSy9sR1RtNVhIa0dIcwpYOUZuQ3YrSjRWRmNRTDIvNnNxWGNaZ1M5QjRzWUFpdUFuTkRGQUt2eCtDVE90NHNXMFU3RGM4c3V6Zi9nV1h4CjVwZFJpcFFjMFJRSlAyT0ZlaVdwY0xUY1UvRVcrT1VWSENOOHlyNmFIK2RnVm04YzdqQjVNM1NWZTFBcjBaYnEKUU9zaWZoMVNFVVR4cWExQnNVeEVMM2Vock0wPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  key.pem: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeWRaUklNVURkdDN6dzdNRTByM1dvd1ZONWtLUkU0bVFhaGYxME1KUEF6cWZGTml0CjNWekdKbHg2Ly9LQUZXZytTMUZmZ3puNGVIMnJGVWMvQlJMYzVuZVNVU1RjQysyWTFUeVV0K3R3MVFmSTBpVkYKZWk5d2dPenI3OG8rY1RIcU92cUcvanhlR1FzdS9uTE9kcWQ2UU5sQThIUVk1OVl4TlR6bnExN2w2c1l3WFRySQp4dUJDN280dXM4L2t1TWl5d3MxOTF3QktJQTdXQlFZRFZpMFpzWnQ2QmhJNlJ0M3Fpd0FZTFJSMzhlb3FGVnFTClAwb0R4OFBNTE9weFJuTStWVG13UldBTklqeDNyYndyQmliM0F3VlhMR1ZhM1JreXhzMWxPVHRTVlFBYUhlVXoKeHRSRkhoS0YvRDJ4NW9NclNqQzNoZi9CZXUxcEhXTFN6UGZHRFFJREFRQUJBb0lCQUJDakE4anB0R0ZsNWlQcAphNnBiVDRmY2RoRld4MUtPOGtKc2V5eWI5NXRTaDY1V05lNmJLUkljYVY4VGhBOC9xbkxXNEVLVzBxNUwzWUJCCmdTWlA2Ymx0ZmJnR2k4VEg3dU1VdlVWenVMYzJqdzBUV1dpNjVGRWNOazVyb3ozOVdVdEhQejFSaUlnVDdlbTMKV09GYTZLN1R1WkNZWVQwcTRKOTh4N1BPZkxFZlEzL3RDM2F6c0JzaDBMODFMdHBRU0hHaTRNVzRKaGNhcnN5WgptbHVIMWRJWnlIM1FuWU10a2FaeVAydVVHdFpDMWFIVTZZM3pvY0szWnBQZGh0TUp3T05RRkUxcjN1NitjeEllCmlpOHN3NDlHWjF1VDlwZDd2NGN1OGk4MlZ3QXVocWllL2k2UUVGOFRWbExaY3RMcmtPOHBOaGJUZ3huNTlhMGsKZTJ6Yys0RUNnWUVBNGgzZlAyZG5BeG05MnpHWFhVMVg3MWJibkdTZEdrRW5jUEovZDZoc2pyaVdlcnI0OHl6WgpxaUZCK1d3NkY3VUk2RW4wLzZCQU9IRkNYUGNUMWtuWnFON3Z3S29HZk5oOVZZQ3k0VkRiODU5MnMwVjdsK1JjCmtQWGJmemplazNPTW0yWktTQS90MXRJVng1NXZxWVZuY3hBUnczU3hTdVBvcjM4aDRzc2ZnTkVDZ1lFQTVJTUIKSlV3dHhETWZrVm54V0xlVzdIY1E4dlBvWEl3ZjQxcFpldGxYZG9EYmpPbk5aQjB3R0dwUThMTFpIOFV3VHUvMAp1Qnp4dTk5UC9peEN0MlRVaWxLQzBuQTNoVnY1UGdPaTBSRXZOVDI5NThQZ2R4Uk5OODd1bkhIaUwzUkprQUh0CjBLRG1Tck5QbkF3ZGtZSVN1UE5vaWJrVjRoZ25KWVVoS00rdjRIMENnWUJFTlJDWHRxQkxQaU9ZRUNDQm80Z0kKQ1dKYmpib2FKbGM0YWQzcmdXR2x0NmFreE91OXB1VE52aFNCb1pUd2U4cUJEM1lZK2dVRlFaenNJQmZheHhJaQpMNFdRejNqL2hlcGd0VjdBT3J6dWcwYXlFeDZTRmUrYVJwOThnL0lYOW40T2prK1A1MFl1UzljSURSSFB5QThKCmxXcFdWRWY2dUQ4RFdVMG1kWEUrVVFLQmdRQ2gxb0ptTnZpbTN3bzVlRGpzKzBGaGdjWTRPelJTNzA3YVJ5L2UKU0xXZ0VRenRWTjBKVFg2MW0vNXRLazJLS2E3WUNTd0poVDVUTDRwSTJuSDV6dWlVZW5GNnRzMHJud0w3djdsOQpWaTFZQ0wxSnVybHJ2SzRmbTJmMDF0YzVncU5pNFdyYmVrai9tTlVHRUxLVVRrb1NRUm5GaUpjT0JNc2MwSmUyCmZyanlSUUtCZ0REQnZaaHN6UENpRlQxRXZiRnZSRkZkTklUWUFNK3pIcit5OE93RVl2b3hRK1BVdExPT0hHSTEKMm9mRjlqOGpRbFdXZ29aSnpQS0s1bTJNL2dOUlZqNitwbDlzZHpvM2ozYmpveGZjZkZZRDlORDNkSktwTnIyeApYYkdJekQrRnJlQmFlb0I4eU0vRXZEaHNXR2xmdHo2N2hiVE5nTVhxNXFDNklEZVJxT001Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-tap-tls
  namespace: linkerd
type: Opaque
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  name: v1alpha1.tap.linkerd.io
spec:
  group: tap.linkerd.io
  groupPriorityMinimum: 1000
  service:
    name: linkerd-tap
    namespace: linkerd
  version: v1alpha1
  versionPriority: 100
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-linkerd-web-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-tap-admin
subjects:
- kind: ServiceAccount
  name: linkerd-web
  namespace: linkerd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-web
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-heartbeat
  namespace: linkerd
rules:
- apiGroups:
  - ""
  resourceNames:
  - linkerd-config
  resources:
  - configmaps
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-heartbeat
  namespace: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: linkerd-heartbeat
subjects:
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-heartbeat
  namespace: linkerd
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-controller-api
  namespace: linkerd
spec:
  ports:
  - name: http
    port: 8085
    targetPort: 8085
  selector:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: controller
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-destination
  namespace: linkerd
spec:
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
  selector:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: controller
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-controller
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: k8spkg
      app.kubernetes.io/part-of: linkerd
      k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
      linkerd.io/control-plane-component: controller
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-controller
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.5.0
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.5.0
      labels:
        app.kubernetes.io/managed-by: k8spkg
        app.kubernetes.io/part-of: linkerd
        k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
        linkerd.io/control-plane-component: controller
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-controller
    spec:
      containers:
      - args:
        - public-api
        - -prometheus-url=http://linkerd-prometheus.linkerd.svc.cluster.local:9090
        - -controller-namespace=linkerd
        - -log-level=info
        image: gcr.io/linkerd-io/controller:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: public-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
      - args:
        - destination
        - -addr=:8086
        - -controller-namespace=linkerd
        - -enable-h2-upgrade=true
        - -log-level=info
        image: gcr.io/linkerd-io/controller:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9996
          initialDelaySeconds: 10
        name: destination
        ports:
        - containerPort: 8086
          name: grpc
        - containerPort: 9996
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9996
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd2_proxy=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: localhost.:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            substitute-ca-crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-controller.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            secretKeyRef:
              key: ca.pem
              name: linkerd-identity-trust-anchors
        image: gcr.io/linkerd-io/proxy:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources: null
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.0.0
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-controller
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-sp-validator
  namespace: linkerd
spec:
  ports:
  - name: sp-validator
    port: 443
    targetPort: sp-validator
  selector:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: sp-validator
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: sp-validator
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-sp-validator
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: k8spkg
      app.kubernetes.io/part-of: linkerd
      k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
      linkerd.io/control-plane-component: sp-validator
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.5.0
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.5.0
      labels:
        app.kubernetes.io/managed-by: k8spkg
        app.kubernetes.io/part-of: linkerd
        k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
        linkerd.io/control-plane-component: sp-validator
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-sp-validator
    spec:
      containers:
      - args:
        - sp-validator
        - -log-level=info
        image: gcr.io/linkerd-io/controller:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9997
          initialDelaySeconds: 10
        name: sp-validator
        ports:
        - containerPort: 8443
          name: sp-validator
        - containerPort: 9997
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9997
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd2_proxy=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-destination.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            substitute-ca-crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-controller.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            secretKeyRef:
              key: ca.pem
              name: linkerd-identity-trust-anchors
        image: gcr.io/linkerd-io/proxy:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources: null
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.0.0
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-sp-validator
      volumes:
      - name: tls
        secret:
          secretName: linkerd-sp-validator-tls
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-tap
  namespace: linkerd
spec:
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
  selector:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: tap
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: tap
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-tap
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: k8spkg
      app.kubernetes.io/part-of: linkerd
      k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
      linkerd.io/control-plane-component: tap
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-tap
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.5.0
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.5.0
      labels:
        app.kubernetes.io/managed-by: k8spkg
        app.kubernetes.io/part-of: linkerd
        k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
        linkerd.io/control-plane-component: tap
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-tap
    spec:
      containers:
      - args:
        - tap
        - -controller-namespace=linkerd
        - -log-level=info
        image: gcr.io/linkerd-io/controller:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd2_proxy=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-destination.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            substitute-ca-crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-controller.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            secretKeyRef:
              key: ca.pem
              name: linkerd-identity-trust-anchors
        image: gcr.io/linkerd-io/proxy:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources: null
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.0.0
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-tap
      volumes:
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
      - name: tls
        secret:
          secretName: linkerd-tap-tls
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-web
  namespace: linkerd
spec:
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
  selector:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: web
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: web
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-web
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: k8spkg
      app.kubernetes.io/part-of: linkerd
      k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
      linkerd.io/control-plane-component: web
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-web
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.5.0
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.5.0
      labels:
        app.kubernetes.io/managed-by: k8spkg
        app.kubernetes.io/part-of: linkerd
        k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
        linkerd.io/control-plane-component: web
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-web
    spec:
      containers:
      - args:
        - -api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -grafana-addr=linkerd-grafana.linkerd.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -log-level=info
        image: gcr.io/linkerd-io/web:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd2_proxy=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-destination.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            substitute-ca-crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-controller.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            secretKeyRef:
              key: ca.pem
              name: linkerd-identity-trust-anchors
        image: gcr.io/linkerd-io/proxy:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources: null
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.0.0
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-web
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector
  namespace: linkerd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: k8spkg
      app.kubernetes.io/part-of: linkerd
      k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
      linkerd.io/control-plane-component: proxy-injector
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.5.0
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.5.0
      labels:
        app.kubernetes.io/managed-by: k8spkg
        app.kubernetes.io/part-of: linkerd
        k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
        linkerd.io/control-plane-component: proxy-injector
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-proxy-injector
    spec:
      containers:
      - args:
        - proxy-injector
        - -log-level=info
        image: gcr.io/linkerd-io/controller:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: proxy-injector
        ports:
        - containerPort: 8443
          name: proxy-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      - env:
        - name: LINKERD2_PROXY_LOG
          value: warn,linkerd2_proxy=info
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-destination.linkerd.svc.cluster.local:8086
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: ns:$(_pod_ns)
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          value: |
            substitute-ca-crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity.linkerd.svc.cluster.local:8080
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-controller.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_TAP_SVC_NAME
          value: linkerd-tap.$(_l5d_ns).serviceaccount.identity.$(_l5d_ns).$(_l5d_trustdomain)
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            secretKeyRef:
              key: ca.pem
              name: linkerd-identity-trust-anchors
        image: gcr.io/linkerd-io/proxy:stable-2.5.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /metrics
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources: null
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - 4190,4191
        - --outbound-ports-to-ignore
        - "443"
        image: gcr.io/linkerd-io/proxy-init:v1.0.0
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 10Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          readOnlyRootFilesystem: true
          runAsNonRoot: false
          runAsUser: 0
        terminationMessagePolicy: FallbackToLogsOnError
      serviceAccountName: linkerd-proxy-injector
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - name: tls
        secret:
          secretName: linkerd-proxy-injector-tls
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector
  namespace: linkerd
spec:
  ports:
  - name: proxy-injector
    port: 443
    targetPort: proxy-injector
  selector:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: proxy-injector
  type: ClusterIP
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.5.0
  labels:
    app.kubernetes.io/managed-by: k8spkg
    app.kubernetes.io/part-of: linkerd
    k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-heartbeat
  namespace: linkerd
spec:
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/managed-by: k8spkg
        app.kubernetes.io/part-of: linkerd
        k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
    spec:
      template:
        metadata:
          annotations:
            linkerd.io/created-by: linkerd/helm stable-2.5.0
          labels:
            app.kubernetes.io/managed-by: k8spkg
            app.kubernetes.io/part-of: linkerd
            k8spkg.mgoltzsche.github.com/namespaces: kube-system.linkerd
            linkerd.io/control-plane-component: heartbeat
        spec:
          containers:
          - args:
            - heartbeat
            - -prometheus-url=http://linkerd-prometheus.linkerd.svc.cluster.local:9090
            - -controller-namespace=linkerd
            - -log-level=info
            image: gcr.io/linkerd-io/controller:stable-2.5.0
            imagePullPolicy: IfNotPresent
            name: heartbeat
            securityContext:
              runAsUser: 2103
          restartPolicy: Never
          serviceAccountName: linkerd-heartbeat
  schedule: '0 0 * * * '
  successfulJobsHistoryLimit: 0
